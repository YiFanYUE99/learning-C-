#include <iostream>
using namespace std;
//可重复利用
//C++的面向对象和泛型编程思想，目的是复用性的提升
// 大多数情况下，数据结合 和 算法 都未能有一套标准，导致被迫从事大量重复工作
//为建立数据结构和算法的一套标准，就诞生了STL


//stndard template library--STL
//STL广义上分为容器（container）算法(algorithm)迭代器（iterator）
//容器 算法 通过 迭代器 进行无缝链接
//STL几乎所有代码都采用了模板类或模板函数

//STL的六大组件
//1容器： 各种 数据结构vector、list、deque、set、map等，用来存放数据
//2算法：sort find copy for_each（遍历）
//3迭代器：扮演了 容器 和 算法 之间的胶合剂
//4仿函数：行为类似函数，可作为 算法 的某种策略
//5适配器：一种用来修饰 容器 或 仿函数 或 迭代器接口 的东西
//6空间适配器：负责 空间的配置与管理

//STL中容器、算法、迭代器
//STL就是将运用最广泛的一些数据结构实现出来
//数组、链表、栈、树、队列、集合、映射表
//序列式容器 关联式容器
//序列式容器：强调值的排序，每个 元素 有 固定 的位置
//关联式容器：二叉树结构，各元素之间没有严格的物理上的顺序关系

//算法：解决逻辑或数学上的问题algorithm
//质变算法:运算期间会 更改 元素内容：拷贝、替换、删除
//非质变算法：不会更改区间内的元素内容：查找、计数、遍历、寻找极值

//迭代器：容器 和 算法 之间的 粘合剂
//算法 要通过 迭代器 才能访问 容器 中的的元素
//每个 容器 都有自己专属的 迭代器
//迭代器 类似于 指针
//常用迭代器：双向迭代器 和 随机访问迭代器
int main()
{






	system("pause");

	return 0;

}