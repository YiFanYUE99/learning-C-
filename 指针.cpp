//7.指针：可以通过指针间接访问内存
//编号是从0开始记录的，一般用16进制数字表示
//可以利用 指针变量 保存地址；
//7.3指针占用的内存空间大小：在32位操作系统下指针占4个字节；64位占8个
//7.4.1空指针：指针变量指向内存编号为0的空间；用于初始化指针变量；空指针指向的内存不可访问（不能用*p访问）
//7.4.2野指针：指针指向非法的内存空间
//空指针和野指针都不是我们申请的空间，因此不要访问。
//7.5const修饰指针：①修饰常量②修饰指针③修饰常量和指针

#include <iostream>
using namespace std;
int main()
{
	int a = 10;
	//1.①指针定义的语法
	int* p;
	//1.②让指针记录变量a的地址：指针就是变量的地址
	p = &a;
	cout << "a的地址为" << &a << endl;
	cout << "a的地址为" << p << endl;
	
	//2.使用指针
	*p = 100;//使用*p改变对应内存的变量
	cout << "p指向内存中的变量*p=" << *p << endl;
	cout << "变量a的值" << a << endl;

	//3.查看指针占内存变量大小//因为占8个字节，电脑是64位操作系统；x86是32位
	cout << "sizeof (int*)=" << sizeof(int*) << endl;//不管指针是int double float 还是char指针占的字节是一样的
	cout << "sizeof (int*)=" << sizeof(float*) << endl;
	cout << "sizeof (int*)=" << sizeof(double*) << endl;
	cout << "sizeof (int*)=" << sizeof(char*) << endl;
	
	//7.4.1空指针
	int* n = NULL;//定义空指针
	//不能用*n进行方位或修改指针对应的变量；0~255之间的内存编号是系统占用的，因此不可以访问

	//7.4.2野指针:避免出现野指针
	//int* y = (int*)0x1100;//这就属于野指针

	//7.5.1常量修饰：指针指向的值不可以改（不能*p=200）,指针的指向可以改（p=ab）
	const int* c = &a;//const在int前值不能改
	//7.5.2指针修饰：（*p=20可以，但不能p=ab）可以改变指针指向的值，但不能改变指针指向的位置
	int* const d = &a;//const在指针前指针方向不能改。
    //7.5.3即修饰指针也修饰常量
	const int* const e = &a;
	//7.5总结：const在哪里，后面的变量就不能变了






	system("pause");

	return 0;

}