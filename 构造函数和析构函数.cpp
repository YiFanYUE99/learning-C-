#include <iostream>
using namespace std;
//初始化对象的清理
//C++中面向对象，每个对象都会有初始化设置以及对象销毁前的清理数据的设置
//对象的初始化和清理是两个非常重要的安全问题
//C++利用构造函数和析构函数解决上述问题，两个函数会被编译器自动调用
//如果自己不提供 构造函数 析构函数，编译器会提供空实现
//构造函数 主要用于在创建对象时为对象的成员属性赋值，构造函数由编译器自动调用无需手动
//程序调用对象时会自动调用 构造函数，无需手动调用且只会调用一次
//析构函数~：主要作用在对象销毁前系统自动调用，执行一些清理工作
// 程序在销毁前会自动调用析构，无需手动调用而且只会调用一次
//构造函数 与 析构函数都没有返回值且不写void


class person
{
public:
	//1.构造函数 初始化
	//函数名与类的名称相同
	//构造函数可以有参数，可发生重载
	person()
	{
		cout << "person构造函数的调用" << endl;//如果不写这个构造函数编译器会自己写一个：大括号内什么都没有
	}
	//2.析构函数 进行清理操作
	//函数名和类名相同加在名称前
	//析构函数不可以由参数，不可以发生重载
	//对象在销毁前会调用析构函数且只调用一次
	~person()
	{
		cout << "person的析构函数调用" << endl;
	}
};

//构造和析构 必须有的，如果自己不写，编译器提供一个空的
void test1()
{
	person p;//在栈上的数据，test1执行完毕后自动释放此对象
}
int main()
{
	//创建函数的时候构造函数会被自动调用且只调用一次
	test1();
	//析构函数调用且只调用一次

	person p;//这样只有构造没有析构函数了 按任意键后才会出现析构函数

	return 0;

}